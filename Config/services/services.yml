parameters:
    # bbapp parameters, some will be set at init of container by BBApplication
    bbapp.locale: 'en_US'
    translator.fallback: 'en'
    bbapp.rest_api.path: /rest/
    bbapp.rest_api.version: 1

    # data collectors
    data_collector.templates:
        config: "%bbapp.base.dir%/Resources/scripts/Collector/config.html.twig"
        request: "%bbapp.base.dir%/Resources/scripts/Collector/request.html.twig"
        exception: "%bbapp.base.dir%/Resources/scripts/Collector/exception.html.twig"
        events: "%bbapp.base.dir%/Resources/scripts/Collector/events.html.twig"
        logger: "%bbapp.base.dir%/Resources/scripts/Collector/logger.html.twig"
        # time: "%bbapp.base.dir%/Resources/scripts/Collector/time.html.twig"
        memory: "%bbapp.base.dir%/Resources/scripts/Collector/memory.html.twig"
        routing: "%bbapp.base.dir%/Resources/scripts/Collector/routing.html.twig"
        db: "%bbapp.base.dir%/Resources/scripts/Collector/db.html.twig"

    config.yml_files_to_ignore: [ 'services', 'bootstrap' ]

    # true: always throw an exception on class content unknown
    # false:  always ignore class content unknown
    # debug: throw an exception on class content unknown if debug mode is activated
    bbapp.classcontent.exception_on_unknown_classname: true

    session.handler.pdo.config:
        db_table: 'session'
        db_id_col: 'session_id'
        db_data_col: 'session_value'
        db_time_col: 'session_time'

services:
    config:
        class: BackBee\Config\Config
        arguments: [ '%bbapp.base.dir%/Config', '@cache.bootstrap', null, '%debug%', '%config.yml_files_to_ignore%' ]
        tags:
            - { name: "dumpable", dispatch_event: false }
        calls:
            - [ setContainer, [ '@service_container' ] ]
            - [ setEnvironment, [ '%bbapp.environment%' ] ]
        configurator: [ '@config.configurator', configureApplicationConfig ]

    event.dispatcher:
        class: BackBee\Event\Dispatcher
        arguments: [ '@bbapp', @config ]
        tags:
            - { name: "dumpable", dispatch_event: false }
    ed:
        alias: event.dispatcher

    request:
        class: Symfony\Component\HttpFoundation\Request
        factory: [ Symfony\Component\HttpFoundation\Request, createFromGlobals ]

    controller:
        class: BackBee\Controller\FrontController
        arguments: [ '@bbapp' ]

    media.controller:
        class: BackBee\Controller\MediaController
        arguments: [ '@bbapp' ]

    resource.controller:
        class: BackBee\Controller\ResourceController
        arguments: [ '@bbapp' ]

    renderer:
        class: BackBee\Renderer\Renderer
        arguments: [ '@bbapp' ]
        tags:
            - { name: "dumpable", dispatch_event: false }

    rewriting.urlgenerator:
        class: BackBee\Rewriting\UrlGenerator
        arguments: [ '@bbapp' ]

    translator:
        class: BackBee\Translation\Translator
        arguments: [ '@bbapp', '%bbapp.locale%' ]
        calls:
            - [ setLocale, [ '%bbapp.locale%' ] ]

    pagebuilder:
        class: BackBee\NestedNode\Builder\PageBuilder
        arguments: [ '@em' ]

    registry:
        class: Symfony\Component\HttpFoundation\ParameterBag

    autoloader:
        class: BackBee\AutoLoader\AutoLoader
        arguments: [ '@bbapp' ]
        calls:
            - [ setEventDispatcher, [ '@event.dispatcher' ] ]
        tags:
            - { name: "dumpable", dispatch_event: false }

    keywordbuilder:
        class: BackBee\NestedNode\Builder\KeywordBuilder
        arguments: [ '@em' ]


    bundle.loader:
        class: BackBee\Bundle\BundleLoader
        arguments: [ '@bbapp' ]
        tags:
            - { name: "dumpable", dispatch_event: false }

    config.configurator:
        class: BackBee\Config\Configurator
        arguments: [ '@bbapp', '@bundle.loader' ]
        public: false

    config.persistor:
        class: BackBee\Config\Persistor
        arguments: [ "@bbapp", "@config.configurator" ]

    classcontent.iconizer.thumbnail:
        class: BackBee\ClassContent\Iconizer\ThumbnailIconizer
        arguments: [ '@bbapp' ]

    classcontent.iconizer.property:
        class: BackBee\ClassContent\Iconizer\PropertyIconizer
        arguments: [ '@routing' ]

    classcontent.iconizer.chained:
        class: BackBee\ClassContent\Iconizer\ChainIconizer
        arguments: [ [ "@classcontent.iconizer.property", "@classcontent.iconizer.thumbnail" ] ]

    classcontent.category_manager:
        class: BackBee\ClassContent\CategoryManager
        arguments: [ '@bbapp' ]

    classcontent.manager:
        class: BackBee\ClassContent\ClassContentManager
        arguments: [ '@bbapp', "@classcontent.iconizer.chained" ]

    doctrine.listener:
        class: BackBee\Event\Listener\DoctrineListener
        arguments: [ '@bbapp' ]

    exception.listener:
        class: BackBee\Event\Listener\ExceptionListener
        arguments: [ '@bbapp' ]

    controller_resolver:
        class: BackBee\Controller\ControllerResolver
        arguments: [ '@bbapp' ]

    annotation_reader.cache:
        class: Doctrine\Common\Cache\ArrayCache

    annotation_reader:
        class: Doctrine\Common\Annotations\CachedReader
        arguments: [ '@annotation_reader_chained', '@annotation_reader.cache' ]

    annotation_reader_chained:
        class: BackBee\Annotations\ChainAnnotationReader
        arguments: [ [ '@annotation_reader.full', '@annotation_reader.simple' ] ]

    annotation_reader.simple:
        class: Doctrine\Common\Annotations\SimpleAnnotationReader
        calls:
            - [ addNamespace, [ 'Doctrine\ORM\Mapping' ] ]

    annotation_reader.full:
        class: Doctrine\Common\Annotations\AnnotationReader

    # data collectors
    data_collector.config:
        class: BackBee\Profiler\DataCollector\ConfigDataCollector
        calls:
            - [ setKernel, [ '@?controller' ] ]

    data_collector.request:
        class: Symfony\Component\HttpKernel\DataCollector\RequestDataCollector
        tags:
            - { name: kernel.event_subscriber }

    data_collector.exception:
        class: Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector
        tags:

    data_collector.events:
        class: Symfony\Component\HttpKernel\DataCollector\EventDataCollector
        tags:

    data_collector.logger:
        class: Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector
        arguments: [ '@logging' ]
        tags:
            - { name: monolog.logger,  channel: profiler }

    data_collector.time:
        class: Symfony\Component\HttpKernel\DataCollector\TimeDataCollector
        arguments: [ '@?controller' ]
        tags:
            - { name: monolog.logger,  channel: profiler }

    data_collector.memory:
        class: Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector

    data_collector.routing:
        class: BackBee\Profiler\DataCollector\RoutingDataCollector
        calls:
            - [ setContainer, [ '@service_container' ] ]

    data_collector.doctrine:
        class: BackBee\Profiler\DataCollector\DoctrineDataCollector
        calls:
            - [ setContainer, [ '@service_container' ] ]

    doctrine.dbal.logger.profiling:
        class: BackBee\Logging\DebugStackLogger
        arguments: [ '@bbapp' ]

    doctrine.connection.default:
        class: Doctrine\DBAL\Connection
        factory: [ '@em', getConnection ]

    doctrine:
        class: BackBee\Doctrine\Registry
        arguments:
            - '@service_container'
            - { default: '@doctrine.connection.default' }
            - { default: em }
            - default
            - default

    # session
    bb_session.factory:
        class: BackBee\Session\SessionFactory
        arguments: [ '@config', '@session.storage' ]
        public: false

    bb_session:
        class: Symfony\Component\HttpFoundation\Session\Session
        factory: [ '@bb_session.factory', createSession ]

    session.storage:
        class: Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage

    session.handler.pdo.factory:
        class: BackBee\Session\PdoSessionHandlerFactory
        arguments: [ '@em', '%session.handler.pdo.config%' ]

    session.handler.pdo:
        class: Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        factory: [ '@session.handler.pdo.factory', createPdoHandler ]

    # Validator
    validator:
        class: Symfony\Component\Validator\Validator
        arguments: [ "@validator.metadata_factory", "@validator.factory", "@translator" ]

    validator.metadata_factory:
        class: Symfony\Component\Validator\Mapping\ClassMetadataFactory
        arguments: [ "@validator.loader_annotation" ]

    validator.loader_annotation:
        class: Symfony\Component\Validator\Mapping\Loader\AnnotationLoader
        arguments: [ "@validator.annotation_reader" ]

    validator.annotation_reader:
        class: Doctrine\Common\Annotations\CachedReader
        arguments: [ '@validator.annotation_reader.main', '@validator.annotation_reader_cache' ]

    validator.annotation_reader.main:
        class: Doctrine\Common\Annotations\AnnotationReader

    validator.annotation_reader_cache:
        class: Doctrine\Common\Cache\FilesystemCache
        arguments: [ "%bbapp.cache.dir%", "validator.annotation.cache" ]

    validator.factory:
        class: Symfony\Component\Validator\ConstraintValidatorFactory

    nestednode.page_listener:
        arguments: [ @bbapp ]
        class: BackBee\Event\Listener\PageListener

    nestednode.metadata.resolver:
        class: BackBee\MetaData\MetaDataResolver
        calls:
            - [ setDefinitionsFromConfig, [ @config ] ]
            - [ setEntityManager, [ @em ] ]

    # Bundle
    core.bundle.manager:
        class: BackBee\Bundle\BundleManager
        arguments:
            [ '@bbapp', '@routing' ]